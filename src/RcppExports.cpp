// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distRcpp
Rcpp::NumericMatrix distRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _DPMCD_distRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(distRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// bmdsMCMC
extern "C" SEXP bmdsMCMC(SEXP DIST, SEXP p, int nwarm, int niter);
RcppExport SEXP _DPMCD_bmdsMCMC(SEXP DISTSEXP, SEXP pSEXP, SEXP nwarmSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DIST(DISTSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nwarm(nwarmSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(bmdsMCMC(DIST, p, nwarm, niter));
    return rcpp_result_gen;
END_RCPP
}
// CalcLPML
double CalcLPML(List dpobj);
RcppExport SEXP _DPMCD_CalcLPML(SEXP dpobjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dpobj(dpobjSEXP);
    rcpp_result_gen = Rcpp::wrap(CalcLPML(dpobj));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm_arma_fast
arma::vec dmvnrm_arma_fast(arma::mat const& x, arma::rowvec const& mean, arma::mat const& sigma, bool const logd);
RcppExport SEXP _DPMCD_dmvnrm_arma_fast(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma_fast(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// DP_MCMC
List DP_MCMC(arma::mat obs_dist, arma::mat init_X, double init_sigmasq, const int K, const double alphaVal, const int iters, int modelIndex);
RcppExport SEXP _DPMCD_DP_MCMC(SEXP obs_distSEXP, SEXP init_XSEXP, SEXP init_sigmasqSEXP, SEXP KSEXP, SEXP alphaValSEXP, SEXP itersSEXP, SEXP modelIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type obs_dist(obs_distSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type init_X(init_XSEXP);
    Rcpp::traits::input_parameter< double >::type init_sigmasq(init_sigmasqSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double >::type alphaVal(alphaValSEXP);
    Rcpp::traits::input_parameter< const int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type modelIndex(modelIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(DP_MCMC(obs_dist, init_X, init_sigmasq, K, alphaVal, iters, modelIndex));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DPMCD_distRcpp", (DL_FUNC) &_DPMCD_distRcpp, 1},
    {"_DPMCD_bmdsMCMC", (DL_FUNC) &_DPMCD_bmdsMCMC, 4},
    {"_DPMCD_CalcLPML", (DL_FUNC) &_DPMCD_CalcLPML, 1},
    {"_DPMCD_dmvnrm_arma_fast", (DL_FUNC) &_DPMCD_dmvnrm_arma_fast, 4},
    {"_DPMCD_DP_MCMC", (DL_FUNC) &_DPMCD_DP_MCMC, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_DPMCD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
